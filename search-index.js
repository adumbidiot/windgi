var searchIndex = JSON.parse('{\
"windgi":{"doc":"","i":[[0,"primitives","windgi","",null,null],[3,"Rect","windgi::primitives","A Rectangle",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"width","","",0,null],[12,"height","","",0,null],[11,"new_xywh","","Make a new rect from the given x, y, w, and h values.",0,[[]]],[3,"Color","","An RGB Color",null,null],[12,"r","","",1,null],[12,"g","","",1,null],[12,"b","","",1,null],[11,"new_rgb","","Make a new color from the given r, g and b values.",1,[[]]],[3,"RasterOperation","","",null,null],[18,"SRC_COPY","","Copy from the source DeviceContext",2,null],[11,"empty","","Returns an empty set of flags",2,[[],["rasteroperation",3]]],[11,"all","","Returns the set containing all flags.",2,[[],["rasteroperation",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",2,[[],["dword",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",2,[[["dword",6]],[["option",4],["rasteroperation",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",2,[[["dword",6]],["rasteroperation",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",2,[[["dword",6]],["rasteroperation",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",2,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",2,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",2,[[["rasteroperation",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",2,[[["rasteroperation",3]]]],[11,"insert","","Inserts the specified flags in-place.",2,[[["rasteroperation",3]]]],[11,"remove","","Removes the specified flags in-place.",2,[[["rasteroperation",3]]]],[11,"toggle","","Toggles the specified flags in-place.",2,[[["rasteroperation",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",2,[[["rasteroperation",3]]]],[3,"DeviceContext","windgi","A Device Context",null,null],[11,"from_hwnd","","Safety<code>hwnd</code> must be a valid <code>HWND</code>, or null.",3,[[["hwnd",6]],["option",4]]],[11,"desktop","","Get the desktop",3,[[],["option",4]]],[11,"get_compatible","","Get a DeviceContext compatible with this one.",3,[[],["option",4]]],[11,"get_raw_hdc","","Returns the raw HDC",3,[[],["hdc",6]]],[11,"select_object","","Select a graphics object in this context. TODO: Wrap …",3,[[["gdiobject",3],["into",8]]]],[11,"bit_blit","","Blits an HDC",3,[[],["result",6]]],[11,"stretch_blit","","Blits an HDC with stretching",3,[[["rect",3]],["result",6]]],[11,"fill_rect","","Returns true if successful.",3,[[["into",8],["rect",3],["brush",3]]]],[11,"physical_width","","Get the width of this DeviceContext in physical pixels.",3,[[]]],[11,"physical_height","","Get the  height of this DeviceContext in physical pixels.",3,[[]]],[3,"Brush","","A Brush",null,null],[11,"create_solid_brush","","Make a solid brush.",4,[[["into",8],["colorref",6]],["option",4]]],[11,"get_raw","","Get the raw inner value.",4,[[],["hbrush",6]]],[3,"GdiObject","","",null,null],[3,"BitmapHandle","","A Handle to a bitmap",null,null],[11,"create","","Make a bitmap from the given data.",5,[[],["option",4]]],[11,"get_raw","","Return a raw bitmap handle",5,[[],["hbitmap",6]]],[11,"get_dimensions","","Return the dimensions of this bitmap",5,[[],["option",4]]],[11,"from","windgi::primitives","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","windgi","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","","",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","","",6,[[]]],[11,"from","windgi::primitives","",1,[[["colorref",6]],["color",3]]],[11,"from","windgi","",6,[[["bitmaphandle",3]]]],[11,"into","windgi::primitives","",0,[[],["rect",3]]],[11,"into","","",1,[[],["colorref",6]]],[11,"into","","",2,[[],["dword",6]]],[11,"extend","","",2,[[["intoiterator",8]]]],[11,"clone","","",0,[[],["rect",3]]],[11,"clone","","",1,[[],["color",3]]],[11,"clone","","",2,[[],["rasteroperation",3]]],[11,"cmp","","",2,[[["rasteroperation",3]],["ordering",4]]],[11,"eq","","",0,[[["rect",3]]]],[11,"ne","","",0,[[["rect",3]]]],[11,"eq","","",1,[[["color",3]]]],[11,"ne","","",1,[[["color",3]]]],[11,"eq","","",2,[[["rasteroperation",3]]]],[11,"ne","","",2,[[["rasteroperation",3]]]],[11,"partial_cmp","","",2,[[["rasteroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["rasteroperation",3]]]],[11,"le","","",2,[[["rasteroperation",3]]]],[11,"gt","","",2,[[["rasteroperation",3]]]],[11,"ge","","",2,[[["rasteroperation",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",2,[[["rasteroperation",3]],["rasteroperation",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",2,[[["rasteroperation",3]]]],[11,"not","","Returns the complement of this set of flags.",2,[[],["rasteroperation",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",2,[[["rasteroperation",3]],["rasteroperation",3]]],[11,"bitor","","Returns the union of the two sets of flags.",2,[[["rasteroperation",3]],["rasteroperation",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",2,[[["rasteroperation",3]],["rasteroperation",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",2,[[["rasteroperation",3]]]],[11,"bitor_assign","","Adds the set of flags.",2,[[["rasteroperation",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",2,[[["rasteroperation",3]]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"from_iter","","",2,[[["intoiterator",8]],["rasteroperation",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[3,"Rect"],[3,"Color"],[3,"RasterOperation"],[3,"DeviceContext"],[3,"Brush"],[3,"BitmapHandle"],[3,"GdiObject"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);